// Code generated by protoc-gen-go-grpc. DO NOT EDIT.
// versions:
// - protoc-gen-go-grpc v1.2.0
// - protoc             v3.21.5
// source: journalpb/journal.proto

package journalpb

import (
	context "context"
	grpc "google.golang.org/grpc"
	codes "google.golang.org/grpc/codes"
	status "google.golang.org/grpc/status"
	emptypb "google.golang.org/protobuf/types/known/emptypb"
)

// This is a compile-time assertion to ensure that this generated file
// is compatible with the grpc package it is being compiled against.
// Requires gRPC-Go v1.32.0 or later.
const _ = grpc.SupportPackageIsVersion7

// JournalServiceClient is the client API for JournalService service.
//
// For semantics around ctx use and closing/ending streaming RPCs, please refer to https://pkg.go.dev/google.golang.org/grpc/?tab=doc#ClientConn.NewStream.
type JournalServiceClient interface {
	CreateJournal(ctx context.Context, in *CreateJournalRequest, opts ...grpc.CallOption) (*Journal, error)
	GetJournal(ctx context.Context, in *GetJournalRequest, opts ...grpc.CallOption) (*Journal, error)
	UpdateJournal(ctx context.Context, in *Journal, opts ...grpc.CallOption) (*Journal, error)
	DeleteJournal(ctx context.Context, in *DeleteJournalRequest, opts ...grpc.CallOption) (*emptypb.Empty, error)
	MarkStudent(ctx context.Context, in *MarkStudentRequest, opts ...grpc.CallOption) (*emptypb.Empty, error)
	SetStudentAttendance(ctx context.Context, in *SetStudentAttendanceRequest, opts ...grpc.CallOption) (*emptypb.Empty, error)
	GetStudentJournal(ctx context.Context, in *GetStudentJournalRequest, opts ...grpc.CallOption) (*JournalList, error)
}

type journalServiceClient struct {
	cc grpc.ClientConnInterface
}

func NewJournalServiceClient(cc grpc.ClientConnInterface) JournalServiceClient {
	return &journalServiceClient{cc}
}

func (c *journalServiceClient) CreateJournal(ctx context.Context, in *CreateJournalRequest, opts ...grpc.CallOption) (*Journal, error) {
	out := new(Journal)
	err := c.cc.Invoke(ctx, "/journalpb.JournalService/CreateJournal", in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *journalServiceClient) GetJournal(ctx context.Context, in *GetJournalRequest, opts ...grpc.CallOption) (*Journal, error) {
	out := new(Journal)
	err := c.cc.Invoke(ctx, "/journalpb.JournalService/GetJournal", in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *journalServiceClient) UpdateJournal(ctx context.Context, in *Journal, opts ...grpc.CallOption) (*Journal, error) {
	out := new(Journal)
	err := c.cc.Invoke(ctx, "/journalpb.JournalService/UpdateJournal", in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *journalServiceClient) DeleteJournal(ctx context.Context, in *DeleteJournalRequest, opts ...grpc.CallOption) (*emptypb.Empty, error) {
	out := new(emptypb.Empty)
	err := c.cc.Invoke(ctx, "/journalpb.JournalService/DeleteJournal", in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *journalServiceClient) MarkStudent(ctx context.Context, in *MarkStudentRequest, opts ...grpc.CallOption) (*emptypb.Empty, error) {
	out := new(emptypb.Empty)
	err := c.cc.Invoke(ctx, "/journalpb.JournalService/MarkStudent", in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *journalServiceClient) SetStudentAttendance(ctx context.Context, in *SetStudentAttendanceRequest, opts ...grpc.CallOption) (*emptypb.Empty, error) {
	out := new(emptypb.Empty)
	err := c.cc.Invoke(ctx, "/journalpb.JournalService/SetStudentAttendance", in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *journalServiceClient) GetStudentJournal(ctx context.Context, in *GetStudentJournalRequest, opts ...grpc.CallOption) (*JournalList, error) {
	out := new(JournalList)
	err := c.cc.Invoke(ctx, "/journalpb.JournalService/GetStudentJournal", in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

// JournalServiceServer is the server API for JournalService service.
// All implementations must embed UnimplementedJournalServiceServer
// for forward compatibility
type JournalServiceServer interface {
	CreateJournal(context.Context, *CreateJournalRequest) (*Journal, error)
	GetJournal(context.Context, *GetJournalRequest) (*Journal, error)
	UpdateJournal(context.Context, *Journal) (*Journal, error)
	DeleteJournal(context.Context, *DeleteJournalRequest) (*emptypb.Empty, error)
	MarkStudent(context.Context, *MarkStudentRequest) (*emptypb.Empty, error)
	SetStudentAttendance(context.Context, *SetStudentAttendanceRequest) (*emptypb.Empty, error)
	GetStudentJournal(context.Context, *GetStudentJournalRequest) (*JournalList, error)
	mustEmbedUnimplementedJournalServiceServer()
}

// UnimplementedJournalServiceServer must be embedded to have forward compatible implementations.
type UnimplementedJournalServiceServer struct {
}

func (UnimplementedJournalServiceServer) CreateJournal(context.Context, *CreateJournalRequest) (*Journal, error) {
	return nil, status.Errorf(codes.Unimplemented, "method CreateJournal not implemented")
}
func (UnimplementedJournalServiceServer) GetJournal(context.Context, *GetJournalRequest) (*Journal, error) {
	return nil, status.Errorf(codes.Unimplemented, "method GetJournal not implemented")
}
func (UnimplementedJournalServiceServer) UpdateJournal(context.Context, *Journal) (*Journal, error) {
	return nil, status.Errorf(codes.Unimplemented, "method UpdateJournal not implemented")
}
func (UnimplementedJournalServiceServer) DeleteJournal(context.Context, *DeleteJournalRequest) (*emptypb.Empty, error) {
	return nil, status.Errorf(codes.Unimplemented, "method DeleteJournal not implemented")
}
func (UnimplementedJournalServiceServer) MarkStudent(context.Context, *MarkStudentRequest) (*emptypb.Empty, error) {
	return nil, status.Errorf(codes.Unimplemented, "method MarkStudent not implemented")
}
func (UnimplementedJournalServiceServer) SetStudentAttendance(context.Context, *SetStudentAttendanceRequest) (*emptypb.Empty, error) {
	return nil, status.Errorf(codes.Unimplemented, "method SetStudentAttendance not implemented")
}
func (UnimplementedJournalServiceServer) GetStudentJournal(context.Context, *GetStudentJournalRequest) (*JournalList, error) {
	return nil, status.Errorf(codes.Unimplemented, "method GetStudentJournal not implemented")
}
func (UnimplementedJournalServiceServer) mustEmbedUnimplementedJournalServiceServer() {}

// UnsafeJournalServiceServer may be embedded to opt out of forward compatibility for this service.
// Use of this interface is not recommended, as added methods to JournalServiceServer will
// result in compilation errors.
type UnsafeJournalServiceServer interface {
	mustEmbedUnimplementedJournalServiceServer()
}

func RegisterJournalServiceServer(s grpc.ServiceRegistrar, srv JournalServiceServer) {
	s.RegisterService(&JournalService_ServiceDesc, srv)
}

func _JournalService_CreateJournal_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(CreateJournalRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(JournalServiceServer).CreateJournal(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/journalpb.JournalService/CreateJournal",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(JournalServiceServer).CreateJournal(ctx, req.(*CreateJournalRequest))
	}
	return interceptor(ctx, in, info, handler)
}

func _JournalService_GetJournal_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(GetJournalRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(JournalServiceServer).GetJournal(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/journalpb.JournalService/GetJournal",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(JournalServiceServer).GetJournal(ctx, req.(*GetJournalRequest))
	}
	return interceptor(ctx, in, info, handler)
}

func _JournalService_UpdateJournal_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(Journal)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(JournalServiceServer).UpdateJournal(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/journalpb.JournalService/UpdateJournal",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(JournalServiceServer).UpdateJournal(ctx, req.(*Journal))
	}
	return interceptor(ctx, in, info, handler)
}

func _JournalService_DeleteJournal_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(DeleteJournalRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(JournalServiceServer).DeleteJournal(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/journalpb.JournalService/DeleteJournal",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(JournalServiceServer).DeleteJournal(ctx, req.(*DeleteJournalRequest))
	}
	return interceptor(ctx, in, info, handler)
}

func _JournalService_MarkStudent_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(MarkStudentRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(JournalServiceServer).MarkStudent(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/journalpb.JournalService/MarkStudent",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(JournalServiceServer).MarkStudent(ctx, req.(*MarkStudentRequest))
	}
	return interceptor(ctx, in, info, handler)
}

func _JournalService_SetStudentAttendance_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(SetStudentAttendanceRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(JournalServiceServer).SetStudentAttendance(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/journalpb.JournalService/SetStudentAttendance",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(JournalServiceServer).SetStudentAttendance(ctx, req.(*SetStudentAttendanceRequest))
	}
	return interceptor(ctx, in, info, handler)
}

func _JournalService_GetStudentJournal_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(GetStudentJournalRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(JournalServiceServer).GetStudentJournal(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/journalpb.JournalService/GetStudentJournal",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(JournalServiceServer).GetStudentJournal(ctx, req.(*GetStudentJournalRequest))
	}
	return interceptor(ctx, in, info, handler)
}

// JournalService_ServiceDesc is the grpc.ServiceDesc for JournalService service.
// It's only intended for direct use with grpc.RegisterService,
// and not to be introspected or modified (even as a copy)
var JournalService_ServiceDesc = grpc.ServiceDesc{
	ServiceName: "journalpb.JournalService",
	HandlerType: (*JournalServiceServer)(nil),
	Methods: []grpc.MethodDesc{
		{
			MethodName: "CreateJournal",
			Handler:    _JournalService_CreateJournal_Handler,
		},
		{
			MethodName: "GetJournal",
			Handler:    _JournalService_GetJournal_Handler,
		},
		{
			MethodName: "UpdateJournal",
			Handler:    _JournalService_UpdateJournal_Handler,
		},
		{
			MethodName: "DeleteJournal",
			Handler:    _JournalService_DeleteJournal_Handler,
		},
		{
			MethodName: "MarkStudent",
			Handler:    _JournalService_MarkStudent_Handler,
		},
		{
			MethodName: "SetStudentAttendance",
			Handler:    _JournalService_SetStudentAttendance_Handler,
		},
		{
			MethodName: "GetStudentJournal",
			Handler:    _JournalService_GetStudentJournal_Handler,
		},
	},
	Streams:  []grpc.StreamDesc{},
	Metadata: "journalpb/journal.proto",
}
